import { Component, OnInit, ViewChild } from '@angular/core';
import {
  MatTableDataSource,
  MatPaginator,
  MatSort,
  MAT_DATE_LOCALE,
  MatDialog
} from '@angular/material';
import { Title } from '@angular/platform-browser';
import { WebService, UiService, LocalService } from '@workshop/core-data';
import { FormGroup, FormControl, FormArray, Validators } from '@angular/forms';
import { SelectionModel } from '@angular/cdk/collections';
import { DeleteComponent } from '@workshop/common-ui';

export interface company {
  id: number;
  company_code: number;
  company_title: string;
  cin_number: string;
  company_limited_by: string;
  date_of_incorporation: string;
  nature_of_company: string;
  registered_office: string;
  state_name: string;
  city_name: string;
  address: string;
  pincode: number;
  gst_number: string;
  expiry_date: string;
}

@Component({
  selector: 'app-company',
  templateUrl: './company.component.html',
  styleUrls: ['./company.component.scss'],
  providers: [
    WebService,
    UiService,
    { provide: MAT_DATE_LOCALE, useValue: 'en-GB' }
  ]
})
export class CompanyComponent implements OnInit {
  constructor(
    public pageTitle: Title,
    public web: WebService,
    public ui: UiService,
    public dialog: MatDialog,
    public local: LocalService
  ) {}
  deleteArray: any[];
  header = 'Company List';
  dataSource: MatTableDataSource<company>;
  selection = new SelectionModel<company>(true, []);
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;
  isProgressing = false;
  isStillLoading = false;
  isCreateVisible = false;
  isViewVisible = true;
  isSingleViewVisible = false;
  isSave = false;
  isUpdate = false;
  companyList: any = new FormGroup({
    company_code: new FormControl(''),
    company_title: new FormControl(''),
    cin_number: new FormControl(''),
    company_limited_by: new FormControl(''),
    date_of_incorporation: new FormControl(''),
    nature_of_company: new FormControl(''),
    registered_office: new FormControl(''),
    state: new FormControl(''),
    city: new FormControl(''),
    address: new FormControl(''),
    pincode: new FormControl('', Validators.pattern('^[1-9][0-9]{0,100}$')),
    gst_number: new FormControl(''),
    expiry_date: new FormControl('')
  });
  stateList: any = [];
  cityList: any = [];
  autoData: any = [];
  selectedState = '';
  selectedCity = '';

  logo_url = '';
  sendBase64: any;
  FileDetails: any = [];
  isFileName = false;
  fileName = '';
  fileType = '';
  displayedColumns: string[] = [
    'select',
    'sno',
    'company_code',
    'company_title',
    'cin_number',
    'nature_of_company',
    'registered_office',
    'state_name',
    'gst_number',
    'action'
  ];
  company_id = this.local.getCompany_id();
  imgUrl = '';
  limitedBy: any = [
    {
      id: '0',
      name: 'Shares'
    },
    {
      id: '1',
      name: 'Guarantee'
    },
    {
      id: '2',
      name: 'Others'
    }
  ];

  companyNature: any = [
    {
      id: '0',
      name: 'Public'
    },
    {
      id: '1',
      name: 'Private'
    },
    {
      id: '2',
      name: 'Private Limited'
    },
    {
      id: '3',
      name: 'LLP'
    },
    {
      id: '4',
      name: 'Branch'
    },
    {
      id: '5',
      name: 'Foreign Company'
    },
    {
      id: '6',
      name: 'Individual'
    },
    {
      id: '7',
      name: 'Others'
    }
  ];
  update_logo_url = '';

  clearValue = '';

  isGstError = false;

  isPinError = false;

  checkPincode = () => this.ui.getErrorPincode();
  checkGst = () => this.ui.getErrorGst();
  checkLimitedByCompany(val) {
    switch (val) {
      case '0':
        return 'Shares';
        break;
      case '1':
        return 'Guarantee';
        break;
      case '2':
        return 'Others';
        break;
      default:
        return '';
    }
  }

  checkNatureOfCompany(val) {
    switch (val) {
      case '0':
        return 'Public';
        break;
      case '1':
        return 'Private';
        break;
      case '2':
        return 'Private Limited';
        break;
      case '3':
        return 'LLP';
        break;
      case '4':
        return 'Branch';
        break;
      case '5':
        return 'Foreign Company';
        break;
      case '6':
        return 'Individual';
        break;
      case '7':
        return 'Others';
        break;
    }
  }

  ngOnInit() {
    this.ui.authenticatorUser();
    this.pageTitle.setTitle('Company');
    this.getCompanyList();
    this.getState();
    this.autoGeneratedCode();
  }

  uploadImage(event) {
    const file = event.target.files[0];
    if (file) {
      this.isFileName = true;
      this.fileName = this.ui.getFileName(file.name);
      this.fileType = this.ui.getFileExtension(file.name);
      const myFile: FileReader = new FileReader();
      myFile.onloadend = e => {
        this.sendBase64 = myFile.result;
        this.logo_url = this.sendBase64;
        this.createBase64();
      };

      myFile.readAsDataURL(file);
    }
  }

  createBase64() {
    const request = {
      company_id: this.company_id,
      base64: this.sendBase64,
      logo_type: this.fileType,
      logo_name: this.fileName,
      attachment: `${this.fileName}.${this.fileType}`
    };
    this.FileDetails = [];
    this.web.post('Employeedoc/base64save', request).subscribe(
      data => {
        if (data.status) {
          this.FileDetails.push({
            logo_url: data.url,
            logo_name: this.fileName,
            logo: data.response,
            logo_type: this.fileType
          });
        }
      },
      error => {
        this.ui.snackbarPop('File not added', 'Retry', 'Error');
      }
    );
  }

  getState() {
    const request = {
      country_id: '101'
    };
    this.web.post('Candidatedetails/ajax_get_state_by_id', request).subscribe(
      data => {
        if (data.status) {
          this.stateList = data.response;
        }
      },
      error => {}
    );
  }

  getCityList(id) {
    const request = {
      state_id: id
    };
    this.web.post('Candidatedetails/ajax_get_city_state_id', request).subscribe(
      data => {
        if (data.status) {
          this.cityList = data.response;
        }
      },
      error => {}
    );
  }

  autoGeneratedCode() {
    const request = {
      company_id: this.company_id
    };
    this.web
      .post('Companies/generate_company_code', request)
      .subscribe(data => {
        if (data.status) {
          this.autoData = data.response;
        }
      });
  }

  getCompanyList() {
    this.isStillLoading = true;
    let count = 1;
    let companyData: any;
    this.header = 'Company List';
    const companies = [];

    this.web.get('Companies/get_company_details_by_company').subscribe(
      data => {
        if (data.status) {
          companyData = data.response;
          companyData = companyData.sort((a, b) => b.id - a.id);
          for (const i of companyData) {
            companies.push({
              sno: count,
              id: i.id,
              company_code: i.company_code,
              company_title: i.company_title,
              cin_number: i.cin_number,
              company_limited_by: i.company_limited_by,
              date_of_incorporation: i.date_of_incorporation,
              nature_of_company: i.nature_of_company,
              logo: i.logo,
              logo_name: i.logo_name,
              registered_office: i.registered_office,
              state_name: i.state_name,
              city_name: i.city_name,
              state: i.state,
              city: i.city,
              address: i.address,
              pincode: i.pincode,
              gst_number: i.gst_number,
              expiry_date: i.expiry_date
            });
            count++;
          }
          this.dataSource = new MatTableDataSource(companies);
          this.dataSource.paginator = this.paginator;
          this.dataSource.sort = this.sort;
          this.isStillLoading = false;
        } else {
          this.isStillLoading = false;
        }
      },
      error => {
        this.ui.snackbarPop('Something went wrong', '', 'Error');
      }
    );
  }

  applyFilter(filterValue: string) {
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  clearSearch = () => {
    this.clearValue = '';
    this.dataSource.filter = '';
  };

  addCompany() {
    this.autoGeneratedCode();
    this.header = 'Add Company';
    this.isViewVisible = false;
    this.isCreateVisible = true;
    this.isSave = true;
    this.isUpdate = false;
    this.companyList = new FormGroup({
      company_code: new FormControl(this.autoData),
      company_title: new FormControl(''),
      cin_number: new FormControl(''),
      company_limited_by: new FormControl(''),
      date_of_incorporation: new FormControl(''),
      nature_of_company: new FormControl(''),
      registered_office: new FormControl(''),
      state: new FormControl(''),
      city: new FormControl(''),
      address: new FormControl(''),
      pincode: new FormControl('', Validators.pattern('^[1-9][0-9]{0,100}$')),
      gst_number: new FormControl(''),
      expiry_date: new FormControl('')
    });
  }

  closeCreate() {
    this.isViewVisible = true;
    this.isCreateVisible = false;
    this.isSingleViewVisible = false;
    this.header = 'Company List';
    this.logo_url = '';
  }

  pinValidation(value) {
    const regEx = /^[1-9][0-9]{0,100}$/;
    if (regEx.test(value.target.value)) {
      this.isPinError = false;
    } else {
      this.isPinError = true;
    }
  }

  gstValidation(value) {
    const regEx = /^[0-9]{2}[a-z]{4}([a-z]{1}|[0-9]{1}).[0-9]{3}[a-z]([a-z]|[0-9]){3}$/;
    if (regEx.test(value.target.value)) {
      this.isGstError = false;
    } else {
      this.isGstError = true;
    }
  }

  saveCompany(isUpdatevalue) {
    const companyValue = this.companyList.value;
    if (
      companyValue.company_code === '' ||
      companyValue.company_code === undefined
    ) {
      this.ui.snackbarPop('Please Enter Company Code', 'Retry', 'Error');
      return false;
    }

    if (
      companyValue.company_title === '' ||
      companyValue.company_title === undefined
    ) {
      this.ui.snackbarPop('Please Enter Company Title', 'Retry', 'Error');
      return false;
    }

    if (
      companyValue.cin_number === '' ||
      companyValue.cin_number === undefined
    ) {
      this.ui.snackbarPop('Please Enter CIN Number', 'Retry', 'Error');
      return false;
    }

    if (
      companyValue.company_limited_by === '' ||
      companyValue.company_limited_by === undefined
    ) {
      this.ui.snackbarPop('Please Enter Company limited by', 'Retry', 'Error');
      return false;
    }

    if (
      companyValue.date_of_incorporation === '' ||
      companyValue.date_of_incorporation === undefined
    ) {
      this.ui.snackbarPop(
        'Please Pick Date of incorporation',
        'Retry',
        'Error'
      );
      return false;
    }

    if (
      companyValue.nature_of_company === '' ||
      companyValue.nature_of_company === undefined
    ) {
      this.ui.snackbarPop('Please Enter Nature of Company', 'Retry', 'Error');
      return false;
    }

    if (
      companyValue.registered_office === '' ||
      companyValue.registered_office === undefined
    ) {
      this.ui.snackbarPop('Please Enter Registered Office', 'Retry', 'Error');
      return false;
    }
    if (companyValue.state === '' || companyValue.state === undefined) {
      this.ui.snackbarPop('Please Select State', 'Retry', 'Error');
      return false;
    }

    if (companyValue.city === '' || companyValue.city === undefined) {
      this.ui.snackbarPop('Please Select City', 'Retry', 'Error');
      return false;
    }

    if (companyValue.address === '' || companyValue.address === undefined) {
      this.ui.snackbarPop('Please Enter Address', 'Retry', 'Error');
      return false;
    }

    if (companyValue.pincode === '' || companyValue.pincode === undefined) {
      this.ui.snackbarPop('Please Enter Pincode', 'Retry', 'Error');
      return false;
    }
    if (
      companyValue.gst_number === '' ||
      companyValue.gst_number === undefined
    ) {
      this.ui.snackbarPop('Please Enter GST Number', 'Retry', 'Error');
      return false;
    }

    this.isProgressing = true;
    const request = {
      id: companyValue.id,
      company_code: companyValue.company_code,
      company_title: companyValue.company_title,
      cin_number: companyValue.cin_number,
      company_limited_by: companyValue.company_limited_by,
      date_of_incorporation: this.ui.getDate(
        companyValue.date_of_incorporation
      ),
      nature_of_company: companyValue.nature_of_company,
      registered_office: companyValue.registered_office,
      state: companyValue.state,
      city: companyValue.city,
      address: companyValue.address,
      pincode: companyValue.pincode,
      gst_number: companyValue.gst_number,
      expiry_date: this.ui.getDate(companyValue.expiry_date),
      logo: this.FileDetails
    };
    let url = '';

    if (isUpdatevalue) {
      url = 'Companies/ajax_update_company_details';
    } else {
      url = 'Companies/ajax_insert_company_details';
    }

    this.web.post(url, request).subscribe(data => {
      if (data.status) {
        if (isUpdatevalue) {
          this.ui.snackbarPop('Successfully Updated', '', 'Success');
        } else {
          this.ui.snackbarPop('Successfully Added', '', 'Success');
        }
        this.getCompanyList();
        this.isViewVisible = true;
        this.isCreateVisible = false;
        this.isProgressing = false;
      } else {
        this.ui.snackbarPop(data.message, 'Retry', 'Error');
        this.isProgressing = false;
        return false;
      }
    });
  }

  viewCompany(value) {
    this.imgUrl = value.logo_name;
    this.getCityList(value.state);
    this.companyList = new FormGroup({
      id: new FormControl(value.id ? value.id : ''),
      company_code: new FormControl(
        value.company_code ? value.company_code : ''
      ),
      company_title: new FormControl(
        value.company_title ? value.company_title : ''
      ),
      cin_number: new FormControl(value.cin_number ? value.cin_number : ''),
      company_limited_by: new FormControl(
        this.ui.getLimitedByCompany(
          value.company_limited_by ? value.company_limited_by : ''
        )
      ),
      date_of_incorporation: new FormControl(
        value.date_of_incorporation ? value.date_of_incorporation : ''
      ),
      nature_of_company: new FormControl(
        this.ui.getNatureOfCompany(
          value.nature_of_company ? value.nature_of_company : ''
        )
      ),
      registered_office: new FormControl(
        value.registered_office ? value.registered_office : ''
      ),
      state: new FormControl(value.state ? value.state : ''),
      city: new FormControl(value.city ? value.city : ''),
      address: new FormControl(value.address ? value.address : ''),
      pincode: new FormControl(value.pincode ? value.pincode : ''),
      gst_number: new FormControl(value.gst_number ? value.gst_number : ''),
      expiry_date: new FormControl(value.expiry_date ? value.expiry_date : '')
    });
    console.log(this.companyList.value);
    this.companyList.setValue(this.companyList.value);
    this.header = 'View Company';
    this.isViewVisible = false;
    this.isCreateVisible = false;
    this.isSingleViewVisible = true;
  }

  editCompany(value) {
    console.log(value);
    const tempx = value.logo_name;
    this.logo_url = tempx;
    this.getCityList(value.state);
    this.companyList = new FormGroup({
      id: new FormControl(value.id ? value.id : ''),
      company_code: new FormControl(
        value.company_code ? value.company_code : ''
      ),
      company_title: new FormControl(
        value.company_title ? value.company_title : ''
      ),
      cin_number: new FormControl(value.cin_number ? value.cin_number : ''),
      company_limited_by: new FormControl(
        value.company_limited_by ? value.company_limited_by : ''
      ),
      date_of_incorporation: new FormControl(
        value.date_of_incorporation ? value.date_of_incorporation : ''
      ),
      nature_of_company: new FormControl(
        value.nature_of_company ? value.nature_of_company : ''
      ),
      registered_office: new FormControl(
        value.registered_office ? value.registered_office : ''
      ),
      state: new FormControl(value.state ? value.state : ''),
      city: new FormControl(value.city ? value.city : ''),
      address: new FormControl(value.address ? value.address : ''),
      pincode: new FormControl(value.pincode ? value.pincode : ''),
      gst_number: new FormControl(value.gst_number ? value.gst_number : ''),
      expiry_date: new FormControl(value.expiry_date ? value.expiry_date : '')
    });
    this.companyList.setValue(this.companyList.value);
    this.header = 'Update Company';
    this.isViewVisible = false;
    this.isCreateVisible = true;
    this.isSave = false;
    this.isUpdate = true;
  }
  deleteCompany(val) {
    const request = {
      company_id: this.company_id,
      id: val.map(obj => obj.id)
    };
    this.web.post('Companies/ajax_delete_company_details', request).subscribe(
      data => {
        if (data.status) {
          this.ui.snackbarPop('Successfully Department deleted', '', 'Success');
          this.getCompanyList();
          this.selection = new SelectionModel<company>(true, []);
        } else {
          this.ui.snackbarPop(data.message, '', 'Error');
        }
      },
      error => {
        this.ui.snackbarPop('Something went wrong', '', 'Error');
      }
    );
  }

  isAllSelected() {
    const numSelected = this.selection.selected.length;
    let numRows;
    if (numSelected) {
      numRows = this.dataSource.data.length;
    }
    return numSelected === numRows;
  }

  masterToggle() {
    this.isAllSelected()
      ? this.selection.clear()
      : this.dataSource.data.forEach(row => this.selection.select(row));
  }

  checkboxLabel(row?: company): string {
    if (!row) {
      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;
    }
    return `${
      this.selection.isSelected(row) ? 'deselect' : 'select'
    } row ${row.id + 1}`;
  }
  openMultipleDelete() {
    this.deleteArray = [];
    let data: any = [];
    data = this.selection;
    if (data._selected) {
      for (const x of data._selected) {
        this.deleteArray.push({
          id: x.id,
          name: x.company_title,
          code: x.company_code
        });
      }
    }
    this.dialogBox(this.deleteArray);
  }
  openSingleDelete(value) {
    this.deleteArray = [];
    this.deleteArray.push({
      id: value.id,
      name: value.company_title,
      code: value.company_code
    });
    this.dialogBox(this.deleteArray);
  }

  dialogBox(value) {
    const dialogRef = this.dialog.open(DeleteComponent, {
      width: '600px',
      maxHeight: '600px',
      data: {
        details: value,
        headers: {
          first: 'Company Code',
          second: 'Company Name',
          third: 'Action'
        }
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        if (result.length > 0) {
          this.deleteCompany(result);
          this.selection = new SelectionModel<company>(true, []);
        } else {
          this.selection = new SelectionModel<company>(true, []);
          this.ui.snackbarPop(
            'There is no data available to delete',
            '',
            'Error'
          );
        }
      } else {
        this.selection = new SelectionModel<company>(true, []);
      }
    });
  }
}
