import { Component, OnInit, ViewChild } from '@angular/core';
import { Title } from '@angular/platform-browser';
import {
  MatPaginator,
  MatSort,
  MatTableDataSource,
  MatDialog
} from '@angular/material';
import { FormGroup } from '@angular/forms';
import {
  WebService,
  UiService,
  Employee,
  LocalService
} from '@workshop/core-data';
import { SelectionModel } from '@angular/cdk/collections';
import { DeleteComponent } from '@workshop/common-ui';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.scss'],
  providers: [WebService, UiService]
})
export class EmployeeComponent implements OnInit {
  constructor(
    public pageTitle: Title,
    public web: WebService,
    public ui: UiService,
    public dialog: MatDialog,
    public local: LocalService
  ) {}

  dataSource: MatTableDataSource<Employee>;
  selection = new SelectionModel<Employee>(true, []);

  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;
  header = 'Employee Master';
  isViewVisible = true;
  isCreateVisible = false;
  isEmployeeView = false;
  isStillLoading = false;
  isProgressing = false;
  isViewPassword = true;
  isLinear = true;
  isSave = false;
  stateList = '';
  cityList = '';
  autoGeneratedCode = '';
  company_id = this.local.getCompany_id();
  locationName: any = [];

  logo_url = '../../assets/images/user.png';
  sendBase64: any;

  FileDetails: any = '';
  isFileName = false;
  fileName = '';
  fileType = '';

  firstFormGroup: FormGroup;
  secondFormGroup: FormGroup;
  thirdFormGroup: FormGroup;
  fourFormGroup: FormGroup;
  employeeDetailsList: any = {}; //Save
  employeeDataList: any = {}; //ViewEmployee
  clearValue = '';
  gender = [
    { id: '0', name: 'Male' },
    { id: '1', name: 'Female' },
    { id: '2', name: 'Others' }
  ];
  maritalStatusList = [
    { id: '0', name: 'Married' },
    { id: '1', name: 'Single' }
  ];
  bloodGroupList = [
    { id: '0', name: 'A+' },
    { id: '1', name: 'A-' },
    { id: '2', name: 'B+' },
    { id: '3', name: 'AB+' },
    { id: '4', name: 'AB-' },
    { id: '5', name: 'O+' },
    { id: '6', name: 'O-' }
  ];

  displayedColumns: string[] = [
    'select',
    'sno',
    'employeeCode',
    'name',
    'contact',
    'department',
    'designation',
    'location',
    'email',
    'action'
  ];

  selectedState = '';
  selectedCity = '';
  selectedGender = '';
  selectedBlood = '';
  selectedLocation = '';
  selectedMarital = '';
  selectedDept = '';
  selectedDesignation = '';
  selectedCostCenter = '';
  selectedDob = '';
  departmentList = [];
  designationList = [];
  imageUrl = '';
  isValidatePassword = false;
  isPasswordStatus = '';
  deleteArray: any = [];

  vEmail = this.ui.email;
  hide = true;
  vFirstName = this.ui.firstname;
  vMiddleName = this.ui.middlename;
  vLastName = this.ui.lastname;
  vMobile = this.ui.mobile;
  vAltMobile = this.ui.altMobile;
  vAdhaar = this.ui.adhaar;
  vPincode = this.ui.pincode;
  vBankAccount = this.ui.bankAccount;
  vBankIFSC = this.ui.bankIFSC;
  vPanNumber = this.ui.panNumber;
  vGender = this.ui.genderValidation;
  vDob = this.ui.dob;
  vAddress = this.ui.address;
  vSpouseName = this.ui.spousename;
  vSpouseMobile = this.ui.spousemobile;
  vSpouseEmail = this.ui.spouseEmail;
  vFatherName = this.ui.fatherName;
  vFatherMobile = this.ui.fatherMobile;
  vFatherEmail = this.ui.fatherEmail;
  vMotherName = this.ui.motherName;
  vMotherMobile = this.ui.motherMobile;
  vMotherEmail = this.ui.motherEmail;
  vNominee = this.ui.nominee;
  costCenterList: any = [];

  viewUrl = '';
  edit_img_url = '';
  clearSearch = () => {
    this.clearValue = '';
    this.dataSource.filter = '';
  };

  checkEmail = () => this.ui.getErrorEmail();
  checkPassword = () => this.ui.getPasswordError();
  checkFirstname = () => this.ui.getErrorFirstname();
  checkMiddlename = () => this.ui.getErrorMiddlename();
  checkLastname = () => this.ui.getErrorLastname();
  checkMobile = () => this.ui.getErrorMobile();
  checkAltMobile = () => this.ui.getErrorAltMobile();
  checkAdhaar = () => this.ui.getErrorAdhaar();
  checkPincode = () => this.ui.getErrorPincode();
  checkBankAccount = () => this.ui.getErrorBankAccount();
  checkBankIFSC = () => this.ui.getErrorBankIFSC();
  checkPanNumber = () => this.ui.getErrorPanNumber();
  checkGender = () => this.ui.getErrorGender();
  checkDob = () => this.ui.getErrordob();
  checkAddress = () => this.ui.getErrorAddress();
  checkSpouseName = () => this.ui.getErrorSpouseName();
  checkSpouseMobile = () => this.ui.getErrorSpouseMobile();
  checkSpouseEmail = () => this.ui.getErrorSpouseEmail();
  checkFatherName = () => this.ui.getErrorFatherName();
  checkFatherMobile = () => this.ui.getErrorFatherMobile();
  checkFatherEmail = () => this.ui.getErrorFatherEmail();
  checkMotherName = () => this.ui.getErrorMotherName();
  checkMotherMobile = () => this.ui.getErrorMotherMobile();
  checkMotherEmail = () => this.ui.getErrorMotherEmail();
  checkNomineeName = () => this.ui.getErrorNomineeName();

  getPasswordError(value) {
    const reg = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{8,}$/;
    if (value === undefined || value === '') {
      this.isValidatePassword = true;
      this.isPasswordStatus = 'Password is required';
    } else if (!reg.test(value)) {
      this.isValidatePassword = true;
      this.isPasswordStatus = 'Enter valid password for eg. Abc@1234';
    } else if (value.length < 8) {
      this.isValidatePassword = true;
      this.isPasswordStatus = 'Password Length Should be 8';
    } else {
      this.isValidatePassword = false;
      this.isPasswordStatus = '';
    }
  }

  ngOnInit() {
    this.ui.authenticatorUser();
    this.pageTitle.setTitle('Employee List');
    this.getEmployeeList();
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
    this.getDepartmentList();
    this.getDesignationList();
    this.getState();
    this.getCostCenter();
    this.getAutoGeneratedId();
  }

  getCostCenter() {
    const request = {
      company_id: this.company_id
    };
    this.web.post('Locations/ajax_get_location_by_company', request).subscribe(
      data => {
        if ((data.status = true)) {
          this.costCenterList = data.response;
        }
      },
      error => {
        this.ui.snackbarPop('Something went wrong', '', 'Error');
      }
    );
  }
  getDepartmentList() {
    const request = {
      company_id: this.company_id
    };
    this.web.post('Department/get_department_by_company', request).subscribe(
      data => {
        if (data.status) {
          this.departmentList = data.response;
        }
      },
      error => {}
    );
  }

  getDesignationList() {
    const request = {
      company_id: this.company_id
    };
    this.web.post('Designation/get_designation_by_company', request).subscribe(
      data => {
        if (data.status) {
          this.designationList = data.Response;
        }
      },
      error => {}
    );
  }

  getEmployeeCode() {
    const request = {
      company_id: this.company_id
    };
    this.web
      .post('Designation/ajax_generate_designation_code', request)
      .subscribe(
        data => {
          if (data.status) {
            this.employeeDetailsList.employeeCode = data.response;
          } else {
            this.ui.snackbarPop(data.message, '', 'Error');
          }
        },
        error => {
          this.ui.snackbarPop('Something went wrong', '', 'Error');
        }
      );
  }

  getEmployeeList() {
    this.isStillLoading = true;
    let employeeData: any = [];
    const employees = [];
    let count = 1;
    const request = {
      company_id: this.company_id
    };
    this.web
      .post('Employeedetails/ajax_get_employeedetails_by_comp', request)
      .subscribe(
        data => {
          if (data.status) {
            employeeData = data.response;
            for (const i of employeeData) {
              employees.push({
                id: i.id,
                sno: count,
                employeeCode: i.employee_code,
                name: `${i.first_name ? i.first_name : ''} ${
                  i.middle_name ? i.middle_name : ''
                } ${i.last_name ? i.last_name : ''}`,
                contact: i.mobile,
                department: i.department,
                departmentId: i.departmentId,
                designationId: i.designationId,
                employee_id: i.employee_id,
                designation: i.designation,
                departmentName: i.department_name,
                designationName: i.designation_name,
                email: i.email,
                firstName: i.first_name,
                middleName: i.middle_name,
                lastName: i.last_name,
                gender: i.gender,
                dob: i.dob,
                hiredate: i.hiredate,
                aniversary: i.aniversary,
                alternativeContact: i.alternativeContact,
                country: 101,
                state: i.state,
                city: i.city,
                stateName: i.state_name,
                cityName: i.city_name,
                address: i.address,
                pin: i.pincode,
                bankAccountno: i.bankAccountno,
                bankIfsc: i.bankIfsc,
                aadhaar: i.aadhaar,
                pan: i.pan,
                bloodGroup: i.bloodGroup,
                maritalStatus: i.maritalStatus,
                spouseName: i.spouseName,
                spouseContact: i.spouseContact,
                spouseEmail: i.spouseEmail,
                spouseDob: i.spouseDob,
                fatherName: i.fatherName,
                fatherContact: i.fatherContact,
                fatherEmail: i.fatherEmail,
                fatherDob: i.fatherDob,
                motherName: i.motherName,
                motherContact: i.motherContact,
                motherEmail: i.motherEmail,
                motherDob: i.motherDob,
                departmentCode: i.departmentCode,
                hireDate: i.hireDate,
                policyNo: i.policyNo,
                validity: i.validity,
                nominee: i.nominee,
                image: i.image_name,
                locations: i.location
              });
              count++;
            }
            this.dataSource = new MatTableDataSource(employees);
            this.dataSource.paginator = this.paginator;
            this.dataSource.sort = this.sort;
            this.isStillLoading = false;
          }
        },
        error => {
          this.ui.snackbarPop('Something went wrong', '', 'Error');
        }
      );
    this.dataSource = new MatTableDataSource(employees);
  }

  applyFilter(filterValue: string) {
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  getState() {
    const request = {
      country_id: '101'
    };
    this.web.post('Candidatedetails/ajax_get_state_by_id', request).subscribe(
      data => {
        if (data.status) {
          this.stateList = data.response;
        }
      },
      error => {}
    );
  }

  getCityList(id) {
    const request = {
      state_id: id
    };
    this.web.post('Candidatedetails/ajax_get_city_state_id', request).subscribe(
      data => {
        if (data.status) {
          this.cityList = data.response;
        }
      },
      error => {}
    );
  }

  getAutoGeneratedId() {
    const request = {
      company_id: this.company_id
    };
    this.web
      .post('Employeedetails/generate_department_code', request)
      .subscribe(data => {
        if (data.status) {
          this.autoGeneratedCode = data.response;
        }
      });
  }

  uploadImage(event) {
    const file = event.target.files[0];
    if (file) {
      this.isFileName = true;
      this.fileName = this.ui.getFileName(file.name);
      this.fileType = this.ui.getFileExtension(file.name);
      const myFile: FileReader = new FileReader();
      myFile.onloadend = e => {
        this.sendBase64 = myFile.result;
        this.logo_url = this.sendBase64;
        this.createBase64();
      };

      myFile.readAsDataURL(file);
    }
  }
  createBase64() {
    const request = {
      company_id: this.company_id,
      base64: this.sendBase64,
      logo_type: this.fileType,
      logo_name: this.fileName,
      attachment: `${this.fileName}.${this.fileType}`
    };
    this.web.post('Employeedoc/base64save', request).subscribe(
      data => {
        if (data.status) {
          this.FileDetails = data.response;
          this.imageUrl = data.url;
        }
      },
      error => {
        this.ui.snackbarPop('File not added', 'Retry', 'Error');
      }
    );
  }

  addEmployee() {
    this.getAutoGeneratedId();
    this.header = 'Add Employee Master';
    this.isViewVisible = false;
    this.isEmployeeView = false;
    this.isViewPassword = true;
    this.isCreateVisible = true;

    this.isSave = true;
    this.employeeDetailsList = {
      employeeCode: this.autoGeneratedCode,
      company_id: '',
      firstName: '',
      middleName: '',
      lastName: '',
      gender: '',
      dob: '',
      aniversary: '',
      contact: '',
      alternativeContact: '',
      email: '',
      password: '',
      country: '',
      state: '',
      city: '',
      address: '',
      pin: '',
      bankAccountno: '',
      bankIfsc: '',
      aadhaar: '',
      pan: '',
      bloodGroup: '',
      maritalStatus: '',
      spouseName: '',
      role: '',
      spouseContact: '',
      spouseEmail: '',
      spouseDob: '',
      fatherName: '',
      fatherContact: '',
      fatherEmail: '',
      fatherDob: '',
      motherName: '',
      motherContact: '',
      motherEmail: '',
      motherDob: '',
      departmentCode: '',
      department: '',
      designation: '',
      hireDate: '',
      policyNo: '',
      validity: '',
      nominee: '',
      image: '',
      locationName: ''
    };
  }

  closeCreate() {
    this.isCreateVisible = false;
    this.isViewVisible = true;
    this.isEmployeeView = false;
    this.header = 'Employee Master';
  }

  validation() {
    this.isCreateVisible = true;
    this.isViewVisible = false;
    this.isEmployeeView = false;
    this.header = 'Add Employee';
  }
  saveEmployee() {
    this.isCreateVisible = false;
    this.isEmployeeView = false;
    this.isViewVisible = true;
    if (
      this.employeeDetailsList.firstName === '' ||
      this.employeeDetailsList.firstName === undefined
    ) {
      this.ui.snackbarPop('Please Enter First Name', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.lastName === '' ||
      this.employeeDetailsList.lastName === undefined
    ) {
      this.ui.snackbarPop('Please Enter Last Name', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.gender === '' ||
      this.employeeDetailsList.gender === undefined
    ) {
      this.ui.snackbarPop('Please Enter Gender', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.contact === '' ||
      this.employeeDetailsList.contact === undefined
    ) {
      this.ui.snackbarPop('Please Enter Contact', 'Retry', 'Error');
      this.validation();
      return false;
    }

    if (
      this.employeeDetailsList.dob === '' ||
      this.employeeDetailsList.dob === undefined
    ) {
      this.ui.snackbarPop('Please Enter Date of Birth', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.aadhaar === '' ||
      this.employeeDetailsList.aadhaar === undefined
    ) {
      this.ui.snackbarPop('Please Enter Adhaar Number', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.email === '' ||
      this.employeeDetailsList.email === undefined
    ) {
      this.ui.snackbarPop('Please Enter Email', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.password === '' ||
      this.employeeDetailsList.password === undefined
    ) {
      this.ui.snackbarPop('Please Enter Password', 'Retry', 'Error');
      this.validation();
      return false;
    }

    if (
      this.employeeDetailsList.state === '' ||
      this.employeeDetailsList.state === undefined
    ) {
      this.ui.snackbarPop('Please Enter State', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.city === '' ||
      this.employeeDetailsList.city === undefined
    ) {
      this.ui.snackbarPop('Please Enter City', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.address === '' ||
      this.employeeDetailsList.address === undefined
    ) {
      this.ui.snackbarPop('Please Enter Address', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.pincode === '' ||
      this.employeeDetailsList.pincode === undefined
    ) {
      this.ui.snackbarPop('Please Enter Pincode', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.bankAccountno === '' ||
      this.employeeDetailsList.bankAccountno === undefined
    ) {
      this.ui.snackbarPop('Please Enter Bank Account Number', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.bankIfsc === '' ||
      this.employeeDetailsList.bankIfsc === undefined
    ) {
      this.ui.snackbarPop('Please Enter Bank IFSC Code', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.pan === '' ||
      this.employeeDetailsList.pan === undefined
    ) {
      this.ui.snackbarPop('Please Enter Pan Number', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.department === '' ||
      this.employeeDetailsList.department === undefined
    ) {
      this.ui.snackbarPop('Please Select Department', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.pan === '' ||
      this.employeeDetailsList.pan === undefined
    ) {
      this.ui.snackbarPop('Please Select Designation', 'Retry', 'Error');
      this.validation();
      return false;
    }
    if (
      this.employeeDetailsList.locationName === '' ||
      this.employeeDetailsList.locationName === undefined
    ) {
      this.ui.snackbarPop('Please Select Location Name', 'Retry', 'Error');
      this.validation();
      return false;
    }
    this.isProgressing = true;
    const request = {
      company_id: this.company_id,
      employee_code: this.employeeDetailsList.employeeCode
        ? this.employeeDetailsList.employeeCode
        : '',
      first_name: this.employeeDetailsList.firstName
        ? this.employeeDetailsList.firstName
        : '',
      middle_name: this.employeeDetailsList.middleName
        ? this.employeeDetailsList.middleName
        : '',
      last_name: this.employeeDetailsList.lastName
        ? this.employeeDetailsList.lastName
        : '',
      gender: this.employeeDetailsList.gender
        ? this.employeeDetailsList.gender
        : '',
      dob: this.ui.getDate(this.employeeDetailsList.dob)
        ? this.ui.getDate(this.employeeDetailsList.dob)
        : '',
      hiredate: this.ui.getDate(this.employeeDetailsList.hireDate)
        ? this.ui.getDate(this.employeeDetailsList.hireDate)
        : '',
      aniversary: this.ui.getDate(this.employeeDetailsList.aniversary)
        ? this.ui.getDate(this.employeeDetailsList.aniversary)
        : '',
      mobile: this.employeeDetailsList.contact
        ? this.employeeDetailsList.contact
        : '',
      alternativeContact: this.employeeDetailsList.alternativeContact
        ? this.employeeDetailsList.alternativeContact
        : '',
      email: this.employeeDetailsList.email
        ? this.employeeDetailsList.email
        : '',
      password: this.employeeDetailsList.password
        ? this.employeeDetailsList.password
        : '',
      country: '101',
      state: this.selectedState ? this.selectedState : '',
      city: this.selectedCity ? this.selectedCity : '',
      address: this.employeeDetailsList.address
        ? this.employeeDetailsList.address
        : '',
      pincode: this.employeeDetailsList.pincode
        ? this.employeeDetailsList.pincode
        : '',
      bankAccountno: this.employeeDetailsList.bankAccountno
        ? this.employeeDetailsList.bankAccountno
        : '',
      bankIfsc: this.employeeDetailsList.bankIfsc
        ? this.employeeDetailsList.bankIfsc
        : '',
      aadhaar: this.employeeDetailsList.aadhaar
        ? this.employeeDetailsList.aadhaar
        : '',
      pan: this.employeeDetailsList.pan ? this.employeeDetailsList.pan : '',
      bloodGroup: this.employeeDetailsList.bloodGroup
        ? this.employeeDetailsList.bloodGroup
        : '',
      maritalStatus: this.selectedMarital ? this.selectedMarital : '',
      spouseName: this.employeeDetailsList.spouseName
        ? this.employeeDetailsList.spouseName
        : '',
      spouseContact: this.employeeDetailsList.spouseContact
        ? this.employeeDetailsList.spouseContact
        : '',
      spouseEmail: this.employeeDetailsList.spouseEmail
        ? this.employeeDetailsList.spouseEmail
        : '',
      spouseDob: this.ui.getDate(this.employeeDetailsList.spouseDob)
        ? this.ui.getDate(this.employeeDetailsList.spouseDob)
        : '',
      fatherName: this.employeeDetailsList.fatherName
        ? this.employeeDetailsList.fatherName
        : '',
      fatherContact: this.employeeDetailsList.fatherContact
        ? this.employeeDetailsList.fatherContact
        : '',
      fatherEmail: this.employeeDetailsList.fatherEmail
        ? this.employeeDetailsList.fatherEmail
        : '',
      fatherDob: this.ui.getDate(this.employeeDetailsList.fatherDob)
        ? this.ui.getDate(this.employeeDetailsList.fatherDob)
        : '',
      motherName: this.employeeDetailsList.motherName
        ? this.employeeDetailsList.motherName
        : '',
      motherContact: this.employeeDetailsList.motherContact
        ? this.employeeDetailsList.motherContact
        : '',
      motherEmail: this.employeeDetailsList.motherEmail
        ? this.employeeDetailsList.motherEmail
        : '',
      motherDob: this.ui.getDate(this.employeeDetailsList.motherDob)
        ? this.ui.getDate(this.employeeDetailsList.motherDob)
        : '',
      departmentId: this.employeeDetailsList.department
        ? this.employeeDetailsList.department
        : '',
      designationId: this.employeeDetailsList.designation
        ? this.employeeDetailsList.designation
        : '',
      policyNo: this.employeeDetailsList.policyNo
        ? this.employeeDetailsList.policyNo
        : '',
      validity: this.ui.getDate(this.employeeDetailsList.validity)
        ? this.ui.getDate(this.employeeDetailsList.validity)
        : '',
      nominee: this.employeeDetailsList.nominee
        ? this.employeeDetailsList.nominee
        : '',
      location_name: this.employeeDetailsList.locationName
        ? this.employeeDetailsList.locationName
        : '',
      role: 'employee',
      image: [
        {
          image_url: this.imageUrl,
          image_name: this.fileName,
          image: this.FileDetails,
          image_type: this.fileType
        }
      ]
    };
    this.web
      .post('Employeedetails/ajax_insert_employeedetails', request)
      .subscribe(
        data => {
          if (data.status) {
            this.ui.snackbarPop('Successfully Employee added', '', 'Success');
            this.isCreateVisible = false;
            this.isEmployeeView = false;
            this.isViewVisible = true;
            this.isProgressing = false;
            this.header = 'Employee Master';
            this.getEmployeeList();
          } else {
            this.ui.snackbarPop(data.message, '', 'Warning');
            this.isCreateVisible = true;
            this.isViewVisible = false;
            this.isEmployeeView = false;
            this.isProgressing = false;
            this.header = 'Add Employee';
            return false;
          }
        },
        error => {
          this.ui.snackbarPop('Something went wrong', '', 'Error');
          this.isCreateVisible = false;
          this.isEmployeeView = false;
          this.isViewVisible = true;
          this.header = 'Employee Master';
        }
      );
  }
  editEmployee(i) {
    this.header = 'Update Employee';
    this.logo_url = i.image;
    this.getCityList(i.state);
    this.isViewVisible = false;
    this.isEmployeeView = false;
    this.isCreateVisible = true;
    this.isViewPassword = false;
    this.isSave = false;
    this.employeeDetailsList = {
      role: 'employee',
      id: i.id,
      company_id: this.company_id,
      employeeCode: i.employeeCode,
      firstName: i.firstName,
      middleName: i.middleName,
      lastName: i.lastName,
      gender: i.gender,
      dob: i.dob,
      hireDate: i.hiredate,
      aniversary: this.ui.getDate(i.aniversary),
      contact: i.contact,
      alternativeContact: i.alternativeContact,
      email: i.email,
      pincode: i.pin,
      country: 101,
      state: i.state,
      state_name: i.state_name,
      city: i.city,
      city_name: i.city_name,
      address: i.address,
      bankAccountno: i.bankAccountno,
      bankIfsc: i.bankIfsc,
      aadhaar: i.aadhaar,
      pan: i.pan,
      bloodGroup: i.bloodGroup,
      maritalStatus: i.maritalStatus,
      spouseName: i.spouseName,
      spouseContact: i.spouseContact,
      spouseEmail: i.spouseEmail,
      spouseDob: this.ui.getDate(i.spouseDob),
      fatherName: i.fatherName,
      fatherContact: i.fatherContact,
      fatherEmail: i.fatherEmail,
      fatherDob: this.ui.getDate(i.fatherDob),
      motherName: i.motherName,
      motherContact: i.motherContact,
      motherEmail: i.motherEmail,
      motherDob: this.ui.getDate(i.motherDob),
      department: i.departmentId,
      designation: i.designationId,
      policyNo: i.policyNo,
      validity: this.ui.getDate(i.validity),
      nominee: i.nominee,
      locationName: i.locations.map(obj => obj.location_name)
    };
  }

  updateEmployee() {
    // const request = this.employeeDetailsList
    const request = {
      id: this.employeeDetailsList.id ? this.employeeDetailsList.id : '',
      company_id: this.company_id,
      employee_code: this.employeeDetailsList.employeeCode
        ? this.employeeDetailsList.employeeCode
        : '',
      first_name: this.employeeDetailsList.firstName
        ? this.employeeDetailsList.firstName
        : '',
      middle_name: this.employeeDetailsList.middleName
        ? this.employeeDetailsList.middleName
        : '',
      last_name: this.employeeDetailsList.lastName
        ? this.employeeDetailsList.lastName
        : '',
      gender: this.employeeDetailsList.gender
        ? this.employeeDetailsList.gender
        : '',
      dob: this.ui.getDate(this.employeeDetailsList.dob)
        ? this.ui.getDate(this.employeeDetailsList.dob)
        : '',
      hiredate: this.ui.getDate(this.employeeDetailsList.hireDate)
        ? this.ui.getDate(this.employeeDetailsList.hireDate)
        : '',
      aniversary: this.ui.getDate(this.employeeDetailsList.aniversary)
        ? this.ui.getDate(this.employeeDetailsList.aniversary)
        : '',
      mobile: this.employeeDetailsList.contact
        ? this.employeeDetailsList.contact
        : '',
      alternativeContact: this.employeeDetailsList.alternativeContact
        ? this.employeeDetailsList.alternativeContact
        : '',
      email: this.employeeDetailsList.email
        ? this.employeeDetailsList.email
        : '',
      password: this.employeeDetailsList.password
        ? this.employeeDetailsList.password
        : '',
      country: '101',
      state: this.selectedState ? this.selectedState : '',
      city: this.selectedCity ? this.selectedCity : '',
      address: this.employeeDetailsList.address
        ? this.employeeDetailsList.address
        : '',
      pincode: this.employeeDetailsList.pincode
        ? this.employeeDetailsList.pincode
        : '',
      bankAccountno: this.employeeDetailsList.bankAccountno
        ? this.employeeDetailsList.bankAccountno
        : '',
      bankIfsc: this.employeeDetailsList.bankIfsc
        ? this.employeeDetailsList.bankIfsc
        : '',
      aadhaar: this.employeeDetailsList.aadhaar
        ? this.employeeDetailsList.aadhaar
        : '',
      pan: this.employeeDetailsList.pan ? this.employeeDetailsList.pan : '',
      bloodGroup: this.employeeDetailsList.bloodGroup
        ? this.employeeDetailsList.bloodGroup
        : '',
      maritalStatus: this.selectedMarital ? this.selectedMarital : '',
      spouseName: this.employeeDetailsList.spouseName
        ? this.employeeDetailsList.spouseName
        : '',
      spouseContact: this.employeeDetailsList.spouseContact
        ? this.employeeDetailsList.spouseContact
        : '',
      spouseEmail: this.employeeDetailsList.spouseEmail
        ? this.employeeDetailsList.spouseEmail
        : '',
      spouseDob: this.ui.getDate(this.employeeDetailsList.spouseDob)
        ? this.ui.getDate(this.employeeDetailsList.spouseDob)
        : '',
      fatherName: this.employeeDetailsList.fatherName
        ? this.employeeDetailsList.fatherName
        : '',
      fatherContact: this.employeeDetailsList.fatherContact
        ? this.employeeDetailsList.fatherContact
        : '',
      fatherEmail: this.employeeDetailsList.fatherEmail
        ? this.employeeDetailsList.fatherEmail
        : '',
      fatherDob: this.ui.getDate(this.employeeDetailsList.fatherDob)
        ? this.ui.getDate(this.employeeDetailsList.fatherDob)
        : '',
      motherName: this.employeeDetailsList.motherName
        ? this.employeeDetailsList.motherName
        : '',
      motherContact: this.employeeDetailsList.motherContact
        ? this.employeeDetailsList.motherContact
        : '',
      motherEmail: this.employeeDetailsList.motherEmail
        ? this.employeeDetailsList.motherEmail
        : '',
      motherDob: this.ui.getDate(this.employeeDetailsList.motherDob)
        ? this.ui.getDate(this.employeeDetailsList.motherDob)
        : '',
      departmentId: this.employeeDetailsList.department
        ? this.employeeDetailsList.department
        : '',
      designationId: this.employeeDetailsList.designation
        ? this.employeeDetailsList.designation
        : '',
      policyNo: this.employeeDetailsList.policyNo
        ? this.employeeDetailsList.policyNo
        : '',
      validity: this.ui.getDate(this.employeeDetailsList.validity)
        ? this.ui.getDate(this.employeeDetailsList.validity)
        : '',
      nominee: this.employeeDetailsList.nominee
        ? this.employeeDetailsList.nominee
        : '',
      location_name: this.employeeDetailsList.locationName
        ? this.employeeDetailsList.locationName
        : '',
      role: 'employee',
      image: [
        {
          image_url: this.imageUrl,
          image_name: this.fileName,
          image: this.FileDetails,
          image_type: this.fileType
        }
      ]
    };
    this.web
      .post('Employeedetails/ajax_update_employeedetails', request)
      .subscribe(
        data => {
          if (data.status) {
            this.ui.snackbarPop(
              'Employee details updated successfully',
              '',
              'Success'
            );
            this.isCreateVisible = false;
            this.isViewVisible = true;
            this.getEmployeeList();
            return false;
          } else {
            this.ui.snackbarPop(data.message, '', 'Warning');
            this.isCreateVisible = true;
            this.isViewVisible = false;
            return false;
          }
        },
        error => {
          this.ui.snackbarPop('Something went wrong', '', 'Error');
          return false;
        }
      );
  }

  viewEmployee(val) {
    this.isCreateVisible = false;
    this.isViewVisible = false;
    this.viewUrl = val.image;
    this.isEmployeeView = true;
    this.header = 'View Employee';
    const request = {
      company_id: this.company_id,
      employee_id: val.employee_id
    };
    this.employeeDataList = {
      employeeCode: val.employeeCode,
      viewUrl: val.image,
      first_name: val.firstName,
      middle_name: val.middleName,
      last_name: val.lastName,
      gender: this.ui.getGender(val.gender),
      mobile: val.contact,
      alternativeContact: val.alternativeContact,
      dob: val.dob,
      hiredate: val.hireDate,
      aadhaar: val.aadhaar,
      email: val.email,
      state_name: val.stateName,
      city_name: val.cityName,
      address: val.address,
      pincode: val.pin,
      bloodGroup: this.ui.getBlood(val.bloodGroup),
      bankAccountno: val.bankAccountno,
      bankIfsc: val.bankIfsc,
      pan: val.pan,
      maritalStatus: val.maritalStatus,
      departmentName: val.departmentName,
      designationName: val.designationName,
      aniversary: val.aniversary,
      spouseName: val.spouseName,
      spouseContact: val.spouseContact,
      spouseEmail: val.spouseEmail,
      spouseDob: val.spouseDob,
      fatherName: val.fatherName,
      fatherContact: val.fatherContact,
      fatherEmail: val.fatherEmail,
      fatherDob: val.fatherDob,
      motherName: val.motherName,
      motherContact: val.motherContact,
      motherEmail: val.motherEmail,
      motherDob: val.motherDob,
      policyNo: val.policyNo,
      nominee: val.nominee,
      validity: val.validity,
      locationNameArray: val.locations
    };
  }

  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }

  masterToggle() {
    this.isAllSelected()
      ? this.selection.clear()
      : this.dataSource.data.forEach(row => this.selection.select(row));
  }

  checkboxLabel(row?: Employee): string {
    if (!row) {
      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;
    }
    return `${
      this.selection.isSelected(row) ? 'deselect' : 'select'
    } row ${row.sno + 1}`;
  }
  deleteEmployee(val) {
    const request = {
      company_id: this.company_id,
      id: val.map(obj => obj.id)
    };
    this.web
      .post('Employeedetails/ajax_delete_employeedetails', request)
      .subscribe(
        data => {
          if (data.status) {
            this.ui.snackbarPop('Successfully deleted', '', 'Success');
            this.getEmployeeList();
            this.selection = new SelectionModel<Employee>(true, []);
          } else {
            this.ui.snackbarPop(data.message, '', 'Warning');
            return false;
          }
        },
        error => {
          this.ui.snackbarPop('Something went wrong', '', 'Error');
        }
      );
  }
  openMultipleDelete() {
    this.deleteArray = [];
    let data: any = [];
    data = this.selection;
    if (data._selected) {
      for (const x of data._selected) {
        this.deleteArray.push({
          id: x.id,
          name: x.name,
          code: x.employeeCode
        });
      }
    }
    this.dialogBox(this.deleteArray);
  }
  openSingleDelete(value) {
    this.deleteArray = [];
    this.deleteArray.push({
      id: value.id,
      name: value.name,
      code: value.employeeCode
    });
    this.dialogBox(this.deleteArray);
  }

  dialogBox(value) {
    const dialogRef = this.dialog.open(DeleteComponent, {
      width: '600px',
      maxHeight: '600px',
      data: {
        details: value,
        headers: {
          first: 'Employee Code',
          second: 'Employee Name',
          third: 'Action'
        }
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result.length > 0) {
        this.deleteEmployee(result);
      } else {
        this.selection = new SelectionModel<Employee>(true, []);
      }
    });
  }
}
